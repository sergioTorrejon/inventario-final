{"version":3,"file":"src_app_authentication_authentication_module_ts.js","mappings":"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","sources":["./src/app/authentication/authentication.module.ts","./src/app/authentication/authentication.routing.ts","./src/app/authentication/error/error.component.ts","./src/app/authentication/error/error.component.html","./src/app/authentication/lockscreen/lockscreen.component.ts","./src/app/authentication/lockscreen/lockscreen.component.html","./src/app/authentication/login/login.component.ts","./src/app/authentication/login/login.component.html","./src/app/authentication/reset-password/reset-password.component.ts","./src/app/authentication/reset-password/reset-password.component.html"],"sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\nimport { CommonModule } from '@angular/common';\r\nimport {\r\n    MatIconModule\r\n} from '@angular/material/icon';\r\nimport {\r\n    MatCardModule,\r\n} from '@angular/material/card';\r\nimport {\r\n    MatInputModule\r\n} from '@angular/material/input';\r\nimport {\r\n    MatCheckboxModule\r\n} from '@angular/material/checkbox';\r\nimport {\r\n    MatButtonModule\r\n} from '@angular/material/button';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { FlexLayoutModule } from '@angular/flex-layout';\r\nimport { AuthenticationRoutes } from './authentication.routing';\r\nimport { ErrorComponent } from './error/error.component';\r\nimport { LockscreenComponent } from './lockscreen/lockscreen.component';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { ResetPasswordComponent } from './reset-password/reset-password.component';\r\nimport { AppMaterialModule } from '../app-material-module';\r\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatPaginatorModule } from '@angular/material/paginator';\r\nimport { MatSortModule } from '@angular/material/sort';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { MatToolbarModule } from '@angular/material/toolbar';\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        RouterModule.forChild(AuthenticationRoutes),\r\n        CommonModule,\r\n        MatDialogModule,\r\n        MatButtonToggleModule,\r\n        FormsModule,\r\n        MatButtonModule,\r\n        MatInputModule,\r\n        MatIconModule,\r\n        MatSortModule,\r\n        MatTableModule,\r\n        MatToolbarModule,\r\n        MatPaginatorModule,\r\n        AppMaterialModule,\r\n        ReactiveFormsModule,\r\n    ],\r\n    declarations: [\r\n        ErrorComponent,\r\n        LockscreenComponent,\r\n        LoginComponent,\r\n        ResetPasswordComponent\r\n    ]\r\n})\r\nexport class AuthenticationModule { }\r\n","import { Routes } from '@angular/router';\r\n\r\nimport { ErrorComponent } from './error/error.component';\r\nimport { LockscreenComponent } from './lockscreen/lockscreen.component';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { ResetPasswordComponent } from './reset-password/reset-password.component';\r\nexport const AuthenticationRoutes: Routes = [\r\n  {\r\n    path: '',\r\n    children: [\r\n      {\r\n        path: '404',\r\n        component: ErrorComponent\r\n      },\r\n      {\r\n        path: 'lockscreen',\r\n        component: LockscreenComponent\r\n      },\r\n      {\r\n        path: 'login',\r\n        component: LoginComponent\r\n      },\r\n      {\r\n        path: 'reset',\r\n        component: ResetPasswordComponent\r\n      }\r\n    ]\r\n  }\r\n];\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-error',\r\n  templateUrl: './error.component.html',\r\n  styleUrls: ['./error.component.scss']\r\n})\r\nexport class ErrorComponent implements OnInit {\r\n  constructor() {}\r\n\r\n  ngOnInit() {}\r\n}\r\n","<div class=\"login-register\">\r\n    <div class=\"login-register-box error-card text-center\">\r\n        <h1>404</h1>\r\n        <h3 class=\"text-uppercase\">Página no encontrada!</h3>\r\n        <a mat-raised-button color=\"primary\" [routerLink]=\"['/dashboard']\" class=\"btn btn-info btn-rounded waves-effect waves-light m-b-40\">Volver a la página principal</a>\r\n    </div>\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport {\r\n  UntypedFormBuilder,\r\n  UntypedFormGroup,\r\n  Validators,\r\n  FormControl\r\n} from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-lockscreen',\r\n  templateUrl: './lockscreen.component.html',\r\n  styleUrls: ['./lockscreen.component.scss']\r\n})\r\nexport class LockscreenComponent implements OnInit {\r\n  public form!: UntypedFormGroup;\r\n  constructor(private fb: UntypedFormBuilder, private router: Router) {}\r\n\r\n  ngOnInit() {\r\n    this.form = this.fb.group({\r\n      uname: [null, Validators.compose([Validators.required])]\r\n    });\r\n  }\r\n\r\n  onSubmit() {\r\n    this.router.navigate(['/']);\r\n  }\r\n}\r\n","<div class=\"login-register\" style=\"background-image:url(assets/images/background/login-register.jpg);\">\r\n  <div class=\"login-register-box\">\r\n    <mat-card>\r\n      <mat-card-content>\r\n        <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\r\n          <div class=\"text-center\">\r\n            <img src=\"assets/images/users/1.jpg\" class=\"img-circle\" width=\"80\" alt=\"user\" title=\"user\" />\r\n            <h4 class=\"m-t-0\">David Miller</h4>\r\n          </div>\r\n\r\n          <div fxLayout=\"row wrap\">\r\n            <!-- col full-->\r\n            <div fxFlex.gt-sm=\"100\" fxFlex.gt-xs=\"100\" fxFlex=\"100\">\r\n              <mat-form-field style=\"width: 100%\">\r\n                <input matInput placeholder=\"Username\" [formControl]=\"form.controls['uname']\">\r\n              </mat-form-field>\r\n              <small *ngIf=\"form.controls['uname'].hasError('required') && form.controls['uname'].touched\" class=\"text-danger support-text\">Username is required.</small>\r\n            </div>\r\n            <!-- col full-->\r\n            <div fxFlex.gt-sm=\"100\" fxFlex.gt-xs=\"100\" fxFlex=\"100\">\r\n              <button mat-raised-button class=\"btn-block btn-lg m-t-10 m-b-10\" color=\"primary\" type=\"submit\" [disabled]=\"!form.valid\">Unlock</button>\r\n            </div>\r\n          </div>\r\n        </form>\r\n      </mat-card-content>\r\n    </mat-card>\r\n  </div>\r\n</div>","import {\r\n  Component,\r\n  OnInit,\r\n} from '@angular/core';\r\nimport {\r\n  UntypedFormBuilder,\r\n  UntypedFormGroup,\r\n  Validators,\r\n} from '@angular/forms';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { Router } from '@angular/router';\r\n\r\nimport { first } from 'rxjs/operators';\r\n\r\nimport { AuthenticationService } from '../services/authentication.service';\r\n\r\n/**\r\n * La clase LoginComponent\r\n *\r\n * @author J. Alvaro Mamani <jmamani@aps.gob.bo>\r\n*/\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.scss']\r\n})\r\nexport class LoginComponent implements OnInit {\r\n  public form!: UntypedFormGroup;\r\n  constructor(\r\n    private fb: UntypedFormBuilder,\r\n    private router: Router,\r\n    private snackBar: MatSnackBar,\r\n    private authenticationService: AuthenticationService\r\n    ) {\r\n    }\r\n\r\n  ngOnInit() {\r\n    this.form = this.fb.group({\r\n      uname: [null, Validators.compose([Validators.required])],\r\n      password: [null, Validators.compose([Validators.required])]\r\n    });\r\n  }\r\n\r\n  onSubmit() {\r\n    //this.router.navigate(['/dashboard']);\r\n    this.authenticationService.login(this.form.controls['uname'].value, this.form.controls['password'].value)\r\n        .pipe(first())\r\n        .subscribe(\r\n          data => {\r\n            let role =  this.authenticationService.currentUser.role\r\n            let role_principal=''\r\n            if (typeof role === 'string') {\r\n              role_principal = role\r\n              //console.log('La variable es un texto (string).');\r\n            } else if (Array.isArray(role)) {\r\n              role_principal = role[0]\r\n              //console.log('La variable es un array.',role[0]);\r\n            } else {\r\n              //console.log('La variable no es ni un texto ni un array.');\r\n            }\r\n            //console.log(this.authorizationService, 'AUTHo')\r\n            if(role_principal=='administrador'){\r\n              this.router.navigate(['/administrador']);\r\n            }\r\n            else if(role_principal=='supervisor'){\r\n              this.router.navigate(['/verificacion']);\r\n            }\r\n            else if(role_principal==='operador') {\r\n              this.router.navigate(['/registros']);\r\n            }\r\n            else {\r\n              this.router.navigate(['/consultas']);\r\n            }\r\n          },\r\n        )\r\n  }\r\n}\r\n","<div class=\"login-register\" style=\"background-color:#FFF;\">\r\n    <div class=\"login-register-box\">\r\n        <mat-card>\r\n            <mat-card-content>\r\n                <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\r\n                    <div class=\"text-center\">\r\n                        <img alt=\"homepage\" src=\"assets/images/logo-aps2.png\">\r\n                        <h4 class=\"m-t-0\">Sistema de Recepción de documentos y resoluciones</h4>\r\n                    </div>\r\n\r\n                    <div fxLayout=\"row wrap\">\r\n                        <!-- col full-->\r\n                        <div fxFlex.gt-sm=\"100\" fxFlex.gt-xs=\"100\" fxFlex=\"100\">\r\n                            <mat-form-field>\r\n                                <input matInput placeholder=\"Nombre de usuario\" [formControl]=\"form.controls['uname']\">\r\n                            </mat-form-field>\r\n                            <small *ngIf=\"form.controls['uname'].hasError('required') && form.controls['uname'].touched\" class=\"text-danger support-text\">Nombre de usuario es obligatorio.</small>\r\n                        </div>\r\n                        <!-- col full-->\r\n                        <div fxFlex.gt-sm=\"100\" fxFlex.gt-xs=\"100\" fxFlex=\"100\">\r\n                            <mat-form-field>\r\n                                <input matInput type=\"password\" placeholder=\"Password\" [formControl]=\"form.controls['password']\">\r\n                            </mat-form-field>\r\n                            <small *ngIf=\"form.controls['password'].hasError('required') && form.controls['password'].touched\" class=\"text-danger support-text\">Password es obligatorio.</small>\r\n                        </div>\r\n                        <!-- col half-->\r\n                        <!--<div fxFlex.gt-sm=\"50\" fxFlex.gt-xs=\"50\">\r\n                            <mat-checkbox color=\"warn\">Remember me</mat-checkbox>\r\n                        </div>-->\r\n                        <!-- col half-->\r\n                        <!--<div fxFlex.gt-sm=\"50\" fxFlex.gt-xs=\"50\" class=\"text-right\">\r\n                            <a [routerLink]=\"['/authentication/forgot']\" class=\"link\">Forgot pwd?</a>\r\n                        </div>-->\r\n                        <!-- col full-->\r\n                        <div fxFlex.gt-sm=\"100\" fxFlex.gt-xs=\"100\" fxFlex=\"100\">\r\n                            <button mat-raised-button color=\"primary\" class=\"btn-block btn-lg m-t-20 m-b-20\" type=\"submit\" [disabled]=\"!form.valid\">Ingresar</button>\r\n                        </div>\r\n                        <!-- col full-->\r\n                        <!--<div fxFlex.gt-sm=\"100\" fxFlex.gt-xs=\"100\" fxFlex=\"100\" class=\"text-center\">\r\n                            <span>Don't have an account?\r\n                                <a [routerLink]=\"['/authentication/register']\" class=\"text-info link\">Register</a>\r\n                            </span>\r\n                        </div>-->\r\n                    </div>\r\n                </form>\r\n            </mat-card-content>\r\n        </mat-card>\r\n    </div>\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { UntypedFormBuilder, UntypedFormControl, UntypedFormGroup, Validators } from '@angular/forms';\r\nimport { Location } from '@angular/common';\r\nimport { Router,  ActivatedRoute } from '@angular/router';\r\nimport { AuthenticationService } from '../services/authentication.service';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { first } from 'rxjs/operators';\r\n\r\n@Component({\r\n  selector: 'app-reset-password',\r\n  templateUrl: './reset-password.component.html',\r\n  styleUrls: ['./reset-password.component.scss']\r\n})\r\n\r\nexport class ResetPasswordComponent {\r\n  loginForm: UntypedFormGroup;\r\n  user:any;\r\n  passwordUser:any;\r\n  newPass:any;\r\n  confPass:any;\r\n\r\n  error_messages = {\r\n    'uname': [\r\n      { type: 'required', message: 'El nombre de usuario es requerido.' },\r\n      { type: 'minlength', message: 'Longitud requerida minima 4 caracteres.' },\r\n      { type: 'maxlength', message: 'Longitud Maxima 20 Carcateres.' }\r\n    ],\r\n\r\n    'password': [\r\n      { type: 'required', message: 'El password es requerido.' },\r\n      { type: 'minlength', message: 'Longitud Minima 6 Carcateres.' },\r\n      { type: 'maxlength', message: 'Longitud Maxima 20 Carcateres.' }\r\n    ],\r\n\r\n    'newPassword': [\r\n      { type: 'required', message: 'Nuevo password es requerido.' },\r\n      { type: 'minlength', message: 'Longitud Minima 6 Carcateres.' },\r\n      { type: 'maxlength', message: 'Longitud Maxima 20 Carcateres.' }\r\n    ],\r\n    'confirmPassword': [\r\n      { type: 'required', message: 'Confirmacion de Password es requerido.' },\r\n      { type: 'minlength', message: 'Longitud Minima 6 Carcateres.' },\r\n      { type: 'maxlength', message: 'Longitud Maxima 20 Carcateres.' }\r\n    ],\r\n  }\r\n\r\n  constructor(\r\n    private _location: Location,\r\n    public formBuilder: UntypedFormBuilder,\r\n    private router: Router,\r\n    private snackBar: MatSnackBar,\r\n    private authenticationService: AuthenticationService,\r\n\r\n  ) {\r\n\r\n    this.loginForm = this.formBuilder.group({\r\n      uname: new UntypedFormControl('', Validators.compose([\r\n        Validators.required,\r\n        Validators.minLength(4),\r\n        Validators.maxLength(30)\r\n      ])),\r\n      password: new UntypedFormControl('', Validators.compose([\r\n        Validators.required,\r\n        Validators.minLength(6),\r\n        Validators.maxLength(30)\r\n      ])),\r\n      newPassword: new UntypedFormControl('', Validators.compose([\r\n        Validators.required,\r\n        Validators.minLength(6),\r\n        Validators.maxLength(30)\r\n      ])),\r\n      confirmPassword: new UntypedFormControl('', Validators.compose([\r\n        Validators.required,\r\n        Validators.minLength(6),\r\n        Validators.maxLength(30)\r\n      ])),\r\n    }, {\r\n      validators: this.password.bind(this)\r\n    });\r\n\r\n  }\r\n  ngOnInit(\r\n  ) {\r\n\r\n  }\r\n\r\n  password(formGroup: UntypedFormGroup) {\r\n    this.newPass = formGroup.controls['newPassword'].value;\r\n    this.confPass = formGroup.controls['confirmPassword'].value;\r\n    return this.newPass === this.confPass ? null : { 'match': true };\r\n  }\r\n\r\n  goBack(){\r\n    this._location.back();\r\n  }\r\n\r\n  onSubmit() {\r\n    this.user = this.loginForm.controls['uname'].value;\r\n    this.passwordUser = this.loginForm.controls['password'].value;\r\n    this.newPass = this.loginForm.controls['newPassword'].value;\r\n    this.authenticationService.reset(this.user, this.passwordUser, this.newPass )\r\n        .pipe(first())\r\n        .subscribe(\r\n            data => {\r\n              this.snackBar.open('Se realizo la actualizacion de la contraseña correctamente', 'X', {\r\n                duration: 5000,\r\n                panelClass: 'alert-success',\r\n                horizontalPosition: 'center',\r\n                verticalPosition: 'top',\r\n              });\r\n                this.router.navigate(['/authentication/login']);\r\n            },\r\n            error => {\r\n                //this.snackBar.open('Nombre de usuario o contraseña incorrectos', 'X', {\r\n                this.snackBar.open(error, 'X', {\r\n                  duration: 5000,\r\n                  panelClass: 'alert-danger',\r\n                  horizontalPosition: 'center',\r\n                  verticalPosition: 'top',\r\n                });\r\n                console.log('AFTER error');\r\n                console.log(error);\r\n            });\r\n  }\r\n\r\n}\r\n","<div class=\"login-register\" style=\"background-color:#FFF;\">\r\n  <div class=\"login-register-box\">\r\n      <mat-card>\r\n          <mat-card-content>\r\n\r\n              <form [formGroup]=\"loginForm\" (ngSubmit)=\"onSubmit()\">\r\n                <div class=\"text-center\">\r\n                  <img alt=\"homepage\" src=\"assets/images/logo-aps2.png\">\r\n                  <h4 class=\"m-t-0\">\r\n                    Cambio de contraseña\r\n                  </h4>\r\n              </div>\r\n\r\n              <div class=\"form-group\">\r\n                <mat-form-field>\r\n                  <input matInput placeholder=\"Nombre de usuario\" [formControl]=\"loginForm.controls['uname']\">\r\n                </mat-form-field>\r\n                <div *ngFor=\"let error of error_messages.uname\">\r\n                  <small class=\"text-danger support-text\" *ngIf=\"loginForm.controls['uname'].hasError(error.type) && (loginForm.controls['uname'].dirty || loginForm.controls['uname'].touched)\">\r\n                    {{ error.message }}\r\n                  </small>\r\n                </div>\r\n              </div>\r\n\r\n              <div class=\"form-group\">\r\n                <mat-form-field>\r\n                  <input matInput type=\"password\" placeholder=\"Contraseña actual\" [formControl]=\"loginForm.controls['password']\">\r\n                </mat-form-field>\r\n                <div *ngFor=\"let error of error_messages.password\">\r\n                  <small class=\"text-danger support-text\" *ngIf=\"loginForm.controls['password'].hasError(error.type) && (loginForm.controls['password'].dirty || loginForm.controls['password'].touched)\">\r\n                    {{ error.message }}\r\n                  </small>\r\n                </div>\r\n              </div>\r\n\r\n              <div class=\"form-group\">\r\n                <mat-form-field>\r\n                  <input matInput type=\"password\" placeholder=\"Nueva Contraseña\" [formControl]=\"loginForm.controls['newPassword']\">\r\n                </mat-form-field>\r\n                <div *ngFor=\"let error of error_messages.newPassword\">\r\n                  <small class=\"text-danger support-text\" *ngIf=\"loginForm.controls['newPassword'].hasError(error.type) && (loginForm.controls['newPassword'].dirty || loginForm.controls['newPassword'].touched)\">\r\n                    {{ error.message }}\r\n                  </small>\r\n                </div>\r\n              </div>\r\n\r\n              <div class=\"form-group\">\r\n                <mat-form-field>\r\n                  <input matInput type=\"password\" placeholder=\"Confirmar nueva contraseña\" [formControl]=\"loginForm.controls['confirmPassword']\">\r\n                </mat-form-field>\r\n                <div *ngFor=\"let error of error_messages.confirmPassword\">\r\n                  <small class=\"text-danger support-text\" *ngIf=\"loginForm.controls['confirmPassword'].hasError(error.type) && (loginForm.controls['confirmPassword'].dirty || loginForm.controls['confirmPassword'].touched)\">\r\n                    {{ error.message }}\r\n                  </small>\r\n\r\n                </div>\r\n              </div>\r\n              <small class=\"text-danger support-text\" *ngIf=\"newPass!==confPass\">\r\n                Las contraseñas no coinciden\r\n              </small>\r\n               <button mat-raised-button color=\"primary\" class=\"btn-block btn-lg m-t-20 m-b-20\" type=\"submit\" [disabled]=\"!loginForm.valid\">Actualizar</button>\r\n              </form>\r\n\r\n              <div>\r\n                <mat-hint align=\"end\">\r\n                  <button  mat-button color=\"primary\" (click)=\"goBack()\">Atras</button>\r\n                </mat-hint>\r\n              </div>\r\n\r\n          </mat-card-content>\r\n      </mat-card>\r\n  </div>\r\n</div>\r\n"],"names":[],"sourceRoot":"webpack:///"}